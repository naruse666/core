// Code generated by "core generate -add-types"; DO NOT EDIT.

package highlighting

import (
	"github.com/naruse666/core/types"
)

var _ = types.AddType(&types.Type{Name: "github.com/naruse666/core/texteditor/highlighting.Highlighter", IDName: "highlighter", Doc: "Highlighter performs syntax highlighting,\nusing [parse] if available, otherwise falls back on chroma.", Fields: []types.Field{{Name: "StyleName", Doc: "syntax highlighting style to use"}, {Name: "language", Doc: "chroma-based language name for syntax highlighting the code"}, {Name: "Has", Doc: "Has is whether there are highlighting parameters set\n(only valid after [Highlighter.init] has been called)."}, {Name: "TabSize", Doc: "tab size, in chars"}, {Name: "CSSProperties", Doc: "Commpiled CSS properties for given highlighting style"}, {Name: "parseState", Doc: "parser state info"}, {Name: "parseLanguage", Doc: "if supported, this is the [parse.Language] support for parsing"}, {Name: "style", Doc: "current highlighting style"}, {Name: "off", Doc: "external toggle to turn off automatic highlighting"}, {Name: "lastLanguage"}, {Name: "lastStyle"}, {Name: "lexer"}, {Name: "formatter"}}})

var _ = types.AddType(&types.Type{Name: "github.com/naruse666/core/texteditor/highlighting.Trilean", IDName: "trilean", Doc: "Trilean value for StyleEntry value inheritance."})

var _ = types.AddType(&types.Type{Name: "github.com/naruse666/core/texteditor/highlighting.StyleEntry", IDName: "style-entry", Doc: "StyleEntry is one value in the map of highlight style values", Fields: []types.Field{{Name: "Color", Doc: "Color is the text color."}, {Name: "Background", Doc: "Background color.\nIn general it is not good to use this because it obscures highlighting."}, {Name: "Border", Doc: "Border color? not sure what this is -- not really used."}, {Name: "Bold", Doc: "Bold font."}, {Name: "Italic", Doc: "Italic font."}, {Name: "Underline", Doc: "Underline."}, {Name: "NoInherit", Doc: "NoInherit indicates to not inherit these settings from sub-category or category levels.\nOtherwise everything with a Pass is inherited."}, {Name: "themeColor", Doc: "themeColor is the theme-adjusted text color."}, {Name: "themeBackground", Doc: "themeBackground is the theme-adjusted background color."}}})

var _ = types.AddType(&types.Type{Name: "github.com/naruse666/core/texteditor/highlighting.Style", IDName: "style", Doc: "Style is a full style map of styles for different token.Tokens tag values"})

var _ = types.AddType(&types.Type{Name: "github.com/naruse666/core/texteditor/highlighting.Styles", IDName: "styles", Doc: "Styles is a collection of styles", Methods: []types.Method{{Name: "OpenJSON", Doc: "Open hi styles from a JSON-formatted file. You can save and open\nstyles to / from files to share, experiment, transfer, etc.", Directives: []types.Directive{{Tool: "types", Directive: "add"}}, Args: []string{"filename"}, Returns: []string{"error"}}, {Name: "SaveJSON", Doc: "Save hi styles to a JSON-formatted file. You can save and open\nstyles to / from files to share, experiment, transfer, etc.", Directives: []types.Directive{{Tool: "types", Directive: "add"}}, Args: []string{"filename"}, Returns: []string{"error"}}}})

var _ = types.AddType(&types.Type{Name: "github.com/naruse666/core/texteditor/highlighting.Button", IDName: "button", Doc: "Button represents a [core.HighlightingName] with a button.", Embeds: []types.Field{{Name: "Button"}}, Fields: []types.Field{{Name: "HighlightingName"}}})
