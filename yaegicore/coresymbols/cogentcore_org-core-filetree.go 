// Code generated by 'yaegi extract github.com/naruse666/core/filetree'. DO NOT EDIT.

package coresymbols

import (
	"github.com/naruse666/core/base/fileinfo/mimedata"
	"github.com/naruse666/core/core"
	"github.com/naruse666/core/events"
	"github.com/naruse666/core/filetree"
	"github.com/naruse666/core/system"
	"github.com/naruse666/core/tree"
	"image"
	"image/draw"
	"reflect"
)

func init() {
	Symbols["github.com/naruse666/core/filetree/filetree"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"AsNode":             reflect.ValueOf(filetree.AsNode),
		"AsTree":             reflect.ValueOf(filetree.AsTree),
		"FindLocationAll":    reflect.ValueOf(filetree.FindLocationAll),
		"FindLocationDir":    reflect.ValueOf(filetree.FindLocationDir),
		"FindLocationFile":   reflect.ValueOf(filetree.FindLocationFile),
		"FindLocationN":      reflect.ValueOf(filetree.FindLocationN),
		"FindLocationNotTop": reflect.ValueOf(filetree.FindLocationNotTop),
		"FindLocationOpen":   reflect.ValueOf(filetree.FindLocationOpen),
		"FindLocationValues": reflect.ValueOf(filetree.FindLocationValues),
		"NewNode":            reflect.ValueOf(filetree.NewNode),
		"NewTree":            reflect.ValueOf(filetree.NewTree),
		"NewVCSLog":          reflect.ValueOf(filetree.NewVCSLog),
		"NodeHighlighting":   reflect.ValueOf(&filetree.NodeHighlighting).Elem(),
		"NodeNameCountSort":  reflect.ValueOf(filetree.NodeNameCountSort),
		"Search":             reflect.ValueOf(filetree.Search),

		// type definitions
		"DirFlagMap":    reflect.ValueOf((*filetree.DirFlagMap)(nil)),
		"Filer":         reflect.ValueOf((*filetree.Filer)(nil)),
		"FindLocation":  reflect.ValueOf((*filetree.FindLocation)(nil)),
		"Node":          reflect.ValueOf((*filetree.Node)(nil)),
		"NodeEmbedder":  reflect.ValueOf((*filetree.NodeEmbedder)(nil)),
		"NodeNameCount": reflect.ValueOf((*filetree.NodeNameCount)(nil)),
		"SearchResults": reflect.ValueOf((*filetree.SearchResults)(nil)),
		"Tree":          reflect.ValueOf((*filetree.Tree)(nil)),
		"Treer":         reflect.ValueOf((*filetree.Treer)(nil)),
		"VCSLog":        reflect.ValueOf((*filetree.VCSLog)(nil)),

		// interface wrapper definitions
		"_Filer":        reflect.ValueOf((*_github.com/naruse666_core_filetree_Filer)(nil)),
		"_NodeEmbedder": reflect.ValueOf((*_github.com/naruse666_core_filetree_NodeEmbedder)(nil)),
		"_Treer":        reflect.ValueOf((*_github.com/naruse666_core_filetree_Treer)(nil)),
	}
}

// _github.com/naruse666_core_filetree_Filer is an interface wrapper for Filer type
type _github.com/naruse666_core_filetree_Filer struct {
	IValue            interface{}
	WApplyScenePos    func()
	WAsCoreTree       func() *core.Tree
	WAsFileNode       func() *filetree.Node
	WAsTree           func() *tree.NodeBase
	WAsWidget         func() *core.WidgetBase
	WCanOpen          func() bool
	WChildBackground  func(child core.Widget) image.Image
	WContextMenuPos   func(e events.Event) image.Point
	WCopy             func()
	WCopyFieldsFrom   func(from tree.Node)
	WCut              func()
	WDestroy          func()
	WDragDrop         func(e events.Event)
	WDropDeleteSource func(e events.Event)
	WGetFileInfo      func() error
	WInit             func()
	WMimeData         func(md *mimedata.Mimes)
	WNodeWalkDown     func(fun func(n tree.Node) bool)
	WOnAdd            func()
	WOnClose          func()
	WOnOpen           func()
	WOpenFile         func() error
	WPaste            func()
	WPlanName         func() string
	WPosition         func()
	WRenameFiles      func()
	WRender           func()
	WRenderDraw       func(drw system.Drawer, op draw.Op)
	WRenderWidget     func()
	WShowContextMenu  func(e events.Event)
	WSizeDown         func(iter int) bool
	WSizeFinal        func()
	WSizeUp           func()
	WStyle            func()
	WWidgetTooltip    func(pos image.Point) (string, image.Point)
}

func (W _github.com/naruse666_core_filetree_Filer) ApplyScenePos()             { W.WApplyScenePos() }
func (W _github.com/naruse666_core_filetree_Filer) AsCoreTree() *core.Tree     { return W.WAsCoreTree() }
func (W _github.com/naruse666_core_filetree_Filer) AsFileNode() *filetree.Node { return W.WAsFileNode() }
func (W _github.com/naruse666_core_filetree_Filer) AsTree() *tree.NodeBase     { return W.WAsTree() }
func (W _github.com/naruse666_core_filetree_Filer) AsWidget() *core.WidgetBase { return W.WAsWidget() }
func (W _github.com/naruse666_core_filetree_Filer) CanOpen() bool              { return W.WCanOpen() }
func (W _github.com/naruse666_core_filetree_Filer) ChildBackground(child core.Widget) image.Image {
	return W.WChildBackground(child)
}
func (W _github.com/naruse666_core_filetree_Filer) ContextMenuPos(e events.Event) image.Point {
	return W.WContextMenuPos(e)
}
func (W _github.com/naruse666_core_filetree_Filer) Copy()                           { W.WCopy() }
func (W _github.com/naruse666_core_filetree_Filer) CopyFieldsFrom(from tree.Node)   { W.WCopyFieldsFrom(from) }
func (W _github.com/naruse666_core_filetree_Filer) Cut()                            { W.WCut() }
func (W _github.com/naruse666_core_filetree_Filer) Destroy()                        { W.WDestroy() }
func (W _github.com/naruse666_core_filetree_Filer) DragDrop(e events.Event)         { W.WDragDrop(e) }
func (W _github.com/naruse666_core_filetree_Filer) DropDeleteSource(e events.Event) { W.WDropDeleteSource(e) }
func (W _github.com/naruse666_core_filetree_Filer) GetFileInfo() error              { return W.WGetFileInfo() }
func (W _github.com/naruse666_core_filetree_Filer) Init()                           { W.WInit() }
func (W _github.com/naruse666_core_filetree_Filer) MimeData(md *mimedata.Mimes)     { W.WMimeData(md) }
func (W _github.com/naruse666_core_filetree_Filer) NodeWalkDown(fun func(n tree.Node) bool) {
	W.WNodeWalkDown(fun)
}
func (W _github.com/naruse666_core_filetree_Filer) OnAdd()           { W.WOnAdd() }
func (W _github.com/naruse666_core_filetree_Filer) OnClose()         { W.WOnClose() }
func (W _github.com/naruse666_core_filetree_Filer) OnOpen()          { W.WOnOpen() }
func (W _github.com/naruse666_core_filetree_Filer) OpenFile() error  { return W.WOpenFile() }
func (W _github.com/naruse666_core_filetree_Filer) Paste()           { W.WPaste() }
func (W _github.com/naruse666_core_filetree_Filer) PlanName() string { return W.WPlanName() }
func (W _github.com/naruse666_core_filetree_Filer) Position()        { W.WPosition() }
func (W _github.com/naruse666_core_filetree_Filer) RenameFiles()     { W.WRenameFiles() }
func (W _github.com/naruse666_core_filetree_Filer) Render()          { W.WRender() }
func (W _github.com/naruse666_core_filetree_Filer) RenderDraw(drw system.Drawer, op draw.Op) {
	W.WRenderDraw(drw, op)
}
func (W _github.com/naruse666_core_filetree_Filer) RenderWidget()                  { W.WRenderWidget() }
func (W _github.com/naruse666_core_filetree_Filer) ShowContextMenu(e events.Event) { W.WShowContextMenu(e) }
func (W _github.com/naruse666_core_filetree_Filer) SizeDown(iter int) bool         { return W.WSizeDown(iter) }
func (W _github.com/naruse666_core_filetree_Filer) SizeFinal()                     { W.WSizeFinal() }
func (W _github.com/naruse666_core_filetree_Filer) SizeUp()                        { W.WSizeUp() }
func (W _github.com/naruse666_core_filetree_Filer) Style()                         { W.WStyle() }
func (W _github.com/naruse666_core_filetree_Filer) WidgetTooltip(pos image.Point) (string, image.Point) {
	return W.WWidgetTooltip(pos)
}

// _github.com/naruse666_core_filetree_NodeEmbedder is an interface wrapper for NodeEmbedder type
type _github.com/naruse666_core_filetree_NodeEmbedder struct {
	IValue  interface{}
	WAsNode func() *filetree.Node
}

func (W _github.com/naruse666_core_filetree_NodeEmbedder) AsNode() *filetree.Node { return W.WAsNode() }

// _github.com/naruse666_core_filetree_Treer is an interface wrapper for Treer type
type _github.com/naruse666_core_filetree_Treer struct {
	IValue      interface{}
	WAsFileTree func() *filetree.Tree
}

func (W _github.com/naruse666_core_filetree_Treer) AsFileTree() *filetree.Tree { return W.WAsFileTree() }
